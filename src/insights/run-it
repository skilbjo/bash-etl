#!/usr/bin/env bash

dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" && cd "$dir"
src_dir="${dir}/.."
source "${src_dir}/util"
util_setup "$dir"

task=''

usage(){ echo "Usage: insights: ${0} [--date <date>] [--task <task>]" 1>&2; exit 1; }
while [[ $# -gt 0 ]]; do
  case "$1" in
    -t|--task)  task="$2"; shift ;;
    --backfill) task='backfill' ;;
    --testing)  task='testing' ;;
    *) break ;;
  esac
  shift
done
if [[ -z $task ]]; then usage; fi

get_projects(){
  local url="https://circleci.com/api/v1.1/me?circle-token=${circleci_api_key}"

  local result="$(curl "$url" | jq '.projects | keys' | grep -v circleci | jq '.' | sed 's/https:\/\/github.com\/skilbjo\///')" # get my projects, but not my work ones

  echo "$result"
}

get_workflows(){
  local project="$1"
  local url="https://circleci.com/api/v1.1/recent-builds?circle-token=${circleci_api_key}"
  local url="https://circleci.com/api/v1.1/project/gh/skilbjo/${project}/tree/master?circle-token=${circleci_api_key}&limit=1&filter=completed"

  result="$(curl "$url" | jq -r '.[].workflows.job_name')"

  echo "$result"
}

insights(){
  local project="$1"
  local workflow="$2"
  local url="https://circleci.com/api/v2/insights/gh/skilbjo/${project}/workflows/${workflow}?branch=master&circle-token=${circleci_api_key}"

  result="$(curl "$url" | jq '[.items[] | {status: .status, duration: .duration, stopped_at: .stopped_at}]')"

  echo "$result"
}

insights_dev(){
  local workflows_url="https://circleci.com/api/v2/insights/gh/skilbjo/iris/workflows?circle-token=${circleci_api_key}"
  local jobs_all_branches="https://circleci.com/api/v2/insights/gh/skilbjo/iris/workflows/build?circle-token=${circleci_api_key}"
  local jobs_master_branch="https://circleci.com/api/v2/insights/gh/skilbjo/iris/workflows/build?branch=master&circle-token=${circleci_api_key}"
  local url="$jobs_master_branch"

  # for testing
  local result='{"items": [ { "id": "594837df-5538-42ac-8119-e4f46d01688d", "status": "success", "duration": 2624, "created_at": "2019-10-07T20:14:10.767Z", "stopped_at": "2019-10-07T20:57:55.111Z" }, { "id": "82b07dc3-b3ed-429b-ae89-4e9aaf8f13d7", "status": "success", "duration": 2858, "created_at": "2019-10-07T18:23:01.385Z", "stopped_at": "2019-10-07T19:10:39.397Z" } ] }'

  result="$(curl "$url" | jq '.')"

  echo "$result" | jq -r '.items[] | "\(.status) \(.duration) \(.stopped_at)"' | while read status duration stopped_at; do
    influxdb "$status" "$duration" "$stopped_at"
    #jq -n --arg status "$status" --arg duration "$duration" --arg stopped_at "$stopped_at" '{status:$status, duration:$duration, stopped_at:$stopped_at} | [.]'
  done
}

influxdb(){ # https://v2.docs.influxdata.com/v2.0/write-data/
  local project="$1"
  local status="$2"
  local duration="$3"
  if [[ $(whoami) == 'root' ]] || [[ $(whoami) == 'circleci' ]] || [[ $(whoami) == 'sbx_'* ]]; then
    local time="$(date -d "$4" +%s)"
  else
    local time="$(gdate -d "$4" +%s)"
  fi
  local influxdb_line_protocol="${project},status=${status} duration=${duration}i $time"

    # delete this debug print out some debug info once jq error resolved
    echo "$influxdb_line_protocol"

  # ${duration}i , the i stands for integer https://docs.influxdata.com/influxdb/v1.7/write_protocols/line_protocol_tutorial/
  curl -X POST \
    --fail \
    --header "Authorization: Token ${influxdb_api_key}" \
    --url "https://us-west-2-1.aws.cloud2.influxdata.com/api/v2/write?org=skilbjo&precision=s&bucket=circleci" \
    -d @- <<EOF
$influxdb_line_protocol
EOF
}

get_metrics_post_to_influx(){
  local workflow=''
  local build_results=''

  get_projects | jq -r '.[]' | while read project; do
    workflow="$(get_workflows "$project")"
    build_results="$(insights "$project" "$workflow" | jq -r '.')"

    # occasionally see this error (not on every run):
    # jq: error (at <stdin>:0): Cannot iterate over null (null)
    # from https://app.circleci.com/jobs/github/skilbjo/lambdas/74
    # until that is resolved, let's print out some debug info
    echo "$build_results"

    echo "$build_results" | jq -r '.[] | "\(.status) \(.duration) \(.stopped_at)"' | while read status duration stopped_at; do
      influxdb "$project" "$status" "$duration" "$stopped_at"
    done
  done
}

case "$task" in
  get-metrics-and-post-to-influx ) get_metrics_post_to_influx ;;

  insights ) insights ;;

  influx )   influxdb ;;

  testing )  post_metrics
    echo 'Job complete!' && sleep "$(echo "60 * 60 * 24 * 7" | bc)" ;;
  * ) echo 'In dw-etl but got no args.' && exit 1 ;;
esac
